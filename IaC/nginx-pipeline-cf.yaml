AWSTemplateFormatVersion: '2010-09-09'
Description: 'CI/CD Pipeline for Nginx Container with CodePipeline, CodeBuild, and ECR'

Parameters:
  GitHubRepo:
    Type: String
    Description: 'GitHub repository name (e.g., username/repo-name)'
    
  GitHubBranch:
    Type: String
    Default: 'main'
    Description: 'GitHub branch to trigger pipeline'
    
  GitHubToken:
    Type: String
    NoEcho: true
    Description: 'GitHub personal access token for repository access'
    
  ContainerPath:
    Type: String
    Default: 'nginx'
    Description: 'Path to the container folder in your repository (e.g., nginx, containers/nginx)'
    
  ECSClusterName:
    Type: String
    Description: 'Name of the ECS cluster to deploy to'
    
  ECSServiceName:
    Type: String
    Description: 'Name of the ECS service to update'
    
  ECSTaskDefinitionName:
    Type: String
    Description: 'Name of the ECS task definition (if different from service name)'
    Default: ''
    
  ImageTag:
    Type: String
    Default: 'latest'
    Description: 'Docker image tag to use'
    
  ExistingECRRepository:
    Type: String
    Default: ''
    Description: 'Name of existing ECR repository to use (leave empty to create new one)'

Conditions:
  CreateNewECRRepository: !Equals [!Ref ExistingECRRepository, '']
  HasTaskDefinitionName: !Not [!Equals [!Ref ECSTaskDefinitionName, '']]

Resources:
  # ECR Repository for Nginx
  ECRRepository:
    Type: AWS::ECR::Repository
    Condition: CreateNewECRRepository
    Properties:
      RepositoryName: !Sub '${AWS::StackName}-nginx-${AWS::AccountId}'
      ImageScanningConfiguration:
        ScanOnPush: true
      LifecyclePolicy:
        LifecyclePolicyText: |
          {
            "rules": [
              {
                "rulePriority": 1,
                "description": "Keep last 10 images",
                "selection": {
                  "tagStatus": "any",
                  "countType": "imageCountMoreThan",
                  "countNumber": 10
                },
                "action": {
                  "type": "expire"
                }
              }
            ]
          }

  # S3 Bucket for Pipeline Artifacts
  ArtifactsBucket:
    Type: AWS::S3::Bucket
    Properties:
      # BucketName removed - AWS will generate a unique name automatically
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  # IAM Role for CodePipeline
  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: PipelineExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetBucketVersioning
                  - s3:GetObject
                  - s3:PutObject
                  - s3:GetObjectVersion
                Resource:
                  - !Sub '${ArtifactsBucket.Arn}/*'
                  - !GetAtt ArtifactsBucket.Arn
              - Effect: Allow
                Action:
                  - codebuild:BatchGetBuilds
                  - codebuild:StartBuild
                Resource: !GetAtt CodeBuildProject.Arn
              - Effect: Allow
                Action:
                  - ecs:DescribeServices
                  - ecs:DescribeTaskDefinition
                  - ecs:DescribeTasks
                  - ecs:ListTasks
                  - ecs:RegisterTaskDefinition
                  - ecs:UpdateService
                  - ecs:TagResource
                Resource: '*'
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource: '*'

  # IAM Role for CodeBuild
  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodeBuildExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/*'
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource: 
                  - !Sub '${ArtifactsBucket.Arn}/*'
                  - !GetAtt ArtifactsBucket.Arn
              - Effect: Allow
                Action:
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:GetAuthorizationToken
                  - ecr:InitiateLayerUpload
                  - ecr:UploadLayerPart
                  - ecr:CompleteLayerUpload
                  - ecr:PutImage
                Resource: '*'
              - Effect: Allow
                Action:
                  - ecs:DescribeTaskDefinition
                  - ecs:RegisterTaskDefinition
                  - ecs:UpdateService
                  - ecs:DescribeServices
                Resource: '*'
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource: '*'

  # CodeBuild Project
  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub '${AWS::StackName}-build'
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_MEDIUM
        Image: aws/codebuild/amazonlinux2-x86_64-standard:5.0
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
          - Name: AWS_ACCOUNT_ID
            Value: !Ref AWS::AccountId
          - Name: IMAGE_REPO_NAME
            Value: !If
              - CreateNewECRRepository
              - !Ref ECRRepository
              - !Ref ExistingECRRepository
          - Name: IMAGE_TAG
            Value: !Ref ImageTag
          - Name: CONTAINER_PATH
            Value: !Ref ContainerPath
          - Name: ECS_CLUSTER_NAME
            Value: !Ref ECSClusterName
          - Name: ECS_SERVICE_NAME
            Value: !Ref ECSServiceName
          - Name: ECS_TASK_DEFINITION_NAME
            Value: !If
              - HasTaskDefinitionName
              - !Ref ECSTaskDefinitionName
              - !Ref ECSServiceName
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            pre_build:
              commands:
                - echo Logging in to Amazon ECR...
                - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
                - REPOSITORY_URI=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME
                - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
                - IMAGE_TAG_WITH_HASH=$IMAGE_TAG-$COMMIT_HASH
            build:
              commands:
                - echo Build started on $(date)
                - echo "Current working directory:"
                - pwd
                - echo "Contents of current directory:"
                - ls -la
                - echo "Navigating to container path:" $CONTAINER_PATH
                - cd $CONTAINER_PATH
                - echo "Contents of container directory:"
                - ls -la
                - echo "Checking for Dockerfile..."
                - if [ ! -f "Dockerfile" ]; then echo "ERROR - Dockerfile not found in $CONTAINER_PATH"; exit 1; fi
                - echo Building the Docker image...
                - docker build -t $IMAGE_REPO_NAME:$IMAGE_TAG .
                - docker tag $IMAGE_REPO_NAME:$IMAGE_TAG $REPOSITORY_URI:$IMAGE_TAG
                - docker tag $IMAGE_REPO_NAME:$IMAGE_TAG $REPOSITORY_URI:$IMAGE_TAG_WITH_HASH
            post_build:
              commands:
                - echo Build completed on $(date)
                - echo Pushing the Docker images...
                - docker push $REPOSITORY_URI:$IMAGE_TAG
                - docker push $REPOSITORY_URI:$IMAGE_TAG_WITH_HASH
                - echo Getting current task definition from service...
                - SERVICE_INFO=$(aws ecs describe-services --cluster $ECS_CLUSTER_NAME --services $ECS_SERVICE_NAME --region $AWS_DEFAULT_REGION)
                - TASK_DEF_ARN=$(echo $SERVICE_INFO | jq -r '.services[0].taskDefinition')
                - echo "Current task definition ARN:" $TASK_DEF_ARN
                - TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition $TASK_DEF_ARN --region $AWS_DEFAULT_REGION)
                - NEW_TASK_DEFINITION=$(echo $TASK_DEFINITION | jq --arg IMAGE "$REPOSITORY_URI:$IMAGE_TAG_WITH_HASH" '.taskDefinition | .containerDefinitions[0].image = $IMAGE | del(.taskDefinitionArn) | del(.revision) | del(.status) | del(.requiresAttributes) | del(.placementConstraints) | del(.compatibilities) | del(.registeredAt) | del(.registeredBy)')
                - echo Registering new task definition...
                - NEW_TASK_INFO=$(aws ecs register-task-definition --region $AWS_DEFAULT_REGION --cli-input-json "$NEW_TASK_DEFINITION")
                - NEW_REVISION=$(echo $NEW_TASK_INFO | jq '.taskDefinition.revision')
                - echo Updating ECS service...
                - aws ecs update-service --cluster $ECS_CLUSTER_NAME --service $ECS_SERVICE_NAME --task-definition $ECS_SERVICE_NAME:$NEW_REVISION --region $AWS_DEFAULT_REGION
                - echo Deploy completed successfully!
          artifacts:
            files:
              - '**/*'

  # CodePipeline
  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Sub '${AWS::StackName}-pipeline'
      RoleArn: !GetAtt CodePipelineRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactsBucket
      Stages:
        - Name: Source
          Actions:
            - Name: SourceAction
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: '1'
              Configuration:
                Owner: !Select [0, !Split ['/', !Ref GitHubRepo]]
                Repo: !Select [1, !Split ['/', !Ref GitHubRepo]]
                Branch: !Ref GitHubBranch
                OAuthToken: !Ref GitHubToken
                PollForSourceChanges: true
              OutputArtifacts:
                - Name: SourceOutput
        - Name: Build
          Actions:
            - Name: BuildAction
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              Configuration:
                ProjectName: !Ref CodeBuildProject
              InputArtifacts:
                - Name: SourceOutput
              OutputArtifacts:
                - Name: BuildOutput

Outputs:
  ECRRepositoryURI:
    Description: 'ECR Repository URI'
    Value: !If
      - CreateNewECRRepository
      - !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECRRepository}'
      - !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ExistingECRRepository}'
    Export:
      Name: !Sub '${AWS::StackName}-ECRRepositoryURI'
      
  PipelineName:
    Description: 'CodePipeline Name'
    Value: !Ref CodePipeline
    Export:
      Name: !Sub '${AWS::StackName}-PipelineName'
      
  ArtifactsBucketName:
    Description: 'S3 Artifacts Bucket Name'
    Value: !Ref ArtifactsBucket
    Export:
      Name: !Sub '${AWS::StackName}-ArtifactsBucket'
