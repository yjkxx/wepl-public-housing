version: 0.2

phases:
  pre_build:
    commands:
      - echo "Logging in to Amazon ECR..."
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
      - REPOSITORY_URI=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME
      - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - IMAGE_TAG_WITH_HASH=$IMAGE_TAG-$COMMIT_HASH
  build:
    commands:
      - echo "Build started on $(date)"
      - echo "Building multi-architecture Docker image from demo-container..."
      - echo "Current directory contents:"
      - ls -la
      - echo "Checking for required files..."
      - test -f "Dockerfile" || (echo "ERROR - Dockerfile not found" && exit 1)
      - test -f "index.html" || (echo "ERROR - index.html not found" && exit 1)
      - test -f "nginx.conf" || (echo "ERROR - nginx.conf not found" && exit 1)
      - echo "All required files found. Setting up multi-architecture builder..."
      - docker buildx create --name codebuild-multiarch --use --bootstrap || echo "Builder may already exist"
      - echo "Building multi-architecture Docker image (linux/amd64,linux/arm64)..."
      - docker buildx build --platform linux/amd64,linux/arm64 --tag $IMAGE_REPO_NAME:$IMAGE_TAG --tag $REPOSITORY_URI:$IMAGE_TAG --tag $REPOSITORY_URI:$IMAGE_TAG_WITH_HASH --push .
  post_build:
    commands:
      - echo "Build completed on $(date)"
      - echo "Multi-architecture images pushed during build phase"
      - echo "Updating ECS service with new image..."
      - echo "Getting current task definition..."
      - SERVICE_INFO=$(aws ecs describe-services --cluster $ECS_CLUSTER_NAME --services $ECS_SERVICE_NAME --region $AWS_DEFAULT_REGION)
      - TASK_DEF_ARN=$(echo $SERVICE_INFO | jq -r '.services[0].taskDefinition')
      - echo "Current task definition ARN is $TASK_DEF_ARN"
      - TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition $TASK_DEF_ARN --region $AWS_DEFAULT_REGION)
      - NEW_TASK_DEFINITION=$(echo $TASK_DEFINITION | jq --arg IMAGE "$REPOSITORY_URI:$IMAGE_TAG_WITH_HASH" '.taskDefinition | .containerDefinitions[0].image = $IMAGE | del(.taskDefinitionArn) | del(.revision) | del(.status) | del(.requiresAttributes) | del(.placementConstraints) | del(.compatibilities) | del(.registeredAt) | del(.registeredBy) | .runtimePlatform = {"cpuArchitecture": "ARM64", "operatingSystemFamily": "LINUX"}')
      - echo "Registering new task definition with ARM64 architecture..."
      - NEW_TASK_INFO=$(aws ecs register-task-definition --region $AWS_DEFAULT_REGION --cli-input-json "$NEW_TASK_DEFINITION")
      - NEW_REVISION=$(echo $NEW_TASK_INFO | jq '.taskDefinition.revision')
      - TASK_DEF_FAMILY=$(echo $NEW_TASK_INFO | jq -r '.taskDefinition.family')
      - echo "Updating ECS service with new task definition..."
      - aws ecs update-service --cluster $ECS_CLUSTER_NAME --service $ECS_SERVICE_NAME --task-definition $TASK_DEF_FAMILY:$NEW_REVISION --region $AWS_DEFAULT_REGION
      - echo "Deployment completed successfully!"

artifacts:
  files:
    - '**/*'

cache:
  paths:
    - '/root/.docker/**/*'
